#!/bin/bash
set -e

echo "Starting 001-bootstrap within chroot!"

export DEBIAN_FRONTEND=noninteractive

# Conf debconf
debconf-set-selections /debconf.set
rm -f /debconf.set

# Initial package install
apt-get clean
apt-get update
apt-mark hold linux-image-* # We do not want these, as we run our own kernel!
dpkg -i /root/kernel/linux-*.deb # Install post hold

# Export kernel info
export KERN_VERSION=$(find /lib/modules/ -maxdepth 1 | sort | tail -1 | xargs basename )

# Now that we have our wanted kernel in place, do the rest of our installs
apt-get -o Dpkg::Options::="--force-confold" -y --allow-downgrades \
    --allow-remove-essential --allow-change-held-packages install cloud-init \
    bsdextrautils git binutils ca-certificates e2fsprogs haveged parted curl \
    locales console-common openssh-server less vim net-tools wireguard-tools \
    ntpsec u-boot-tools wget u-boot-menu initramfs-tools network-manager

# Locale gen
locale-gen

# Install packages for wifi
apt-get install -y wireless-tools wpasupplicant firmware-brcm80211 wireless-regdb firmware-realtek bluez bluez-tools

# Generate initramfs
update-initramfs -u -k ${KERN_VERSION}

# Update extlinux
u-boot-update

# Disable systemd-networkd, we use nmcli AKA NetworkManager
systemctl disable systemd-networkd
systemctl disable systemd-networkd-wait-online
systemctl mask systemd-networkd
systemctl mask systemd-networkd-wait-online

# Cleanup stuff we don't want floating around
apt-get autoclean
apt-get --purge -y autoremove
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /etc/resolv.conf
rm -rf /var/lib/dbus/machine-id /etc/machine-id # Nuke machine IDs
rm -rf /root/kernel # kernel working dir
