#!/bin/bash
set -e

echo "Starting 001-bootstrap within chroot!"

export DEBIAN_FRONTEND=noninteractive

# Conf debconf
debconf-set-selections /debconf.set
rm -f /debconf.set

# Initial package install
apt-get clean
apt-get update
apt-mark hold linux-image-* # We do not want these, as we run our own kernel!
dpkg -i /root/kernel/linux-*.deb # Install post hold

# Export kernel info
export KERN_VERSION=$(find /lib/modules/ -maxdepth 1 | sort | tail -1 | xargs basename )

# Now that we have our wanted kernel in place, do the rest of our installs
apt-get -o Dpkg::Options::="--force-confold" -y --allow-downgrades \
    --allow-remove-essential --allow-change-held-packages install cloud-init \
    bsdextrautils git binutils ca-certificates e2fsprogs haveged parted curl \
    locales console-common openssh-server less vim net-tools wireguard-tools \
    ntpsec u-boot-tools wget initramfs-tools grub-efi

# Locale gen
locale-gen

# Install packages for wifi
. /etc/os-release
if [ "${ID}" == "debian" ]; then
    apt-get install -y wireless-tools wpasupplicant firmware-brcm80211 wireless-regdb firmware-realtek bluez bluez-tools
elif [ "${ID}" == "ubuntu" ]; then
    apt-get install -y wireless-tools wpasupplicant wireless-regdb bluez bluez-tools linux-firmware
fi

# Add our GPU firmware
mkdir -p /lib/firmware/arm/mali/arch10.8
wget -O /lib/firmware/arm/mali/arch10.8/mali_csffw.bin "https://gitlab.com/firefly-linux/external/libmali/-/raw/rk3588/firefly/firmware/g610/mali_csffw.bin"

# Add our BRCM firmwares for quartzpro64
wget -O /lib/firmware/brcm/brcmfmac43752-pcie.bin "https://github.com/armbian/firmware/raw/refs/heads/master/brcm/brcmfmac43752-pcie.bin"
wget -O /lib/firmware/brcm/brcmfmac43752-pcie.clm_blob "https://github.com/armbian/firmware/raw/refs/heads/master/brcm/brcmfmac43752-pcie.clm_blob"
wget -O /lib/firmware/brcm/brcmfmac43752-pcie.txt "https://github.com/armbian/firmware/raw/refs/heads/master/brcm/brcmfmac43752-pcie.txt"

# Generate initramfs for our kernel
update-initramfs -u -k ${KERN_VERSION}

# Install grub
echo "GRUB_DISABLE_OS_PROBER=true" >> /etc/default/grub
if [ "${ID}" == "debian" ]; then
    grub-install --target=arm64-efi --efi-directory=/boot/efi --bootloader-id=${ID} --recheck --no-nvram --removable
    update-grub
elif [ "${ID}" == "ubuntu" ]; then
    grub-install --target=arm64-efi --efi-directory=/boot/efi --bootloader-id=${ID} --recheck --no-nvram
    update-grub
fi

# Disable systemd-networkd-wait-online, it sucks
systemctl disable systemd-networkd-wait-online
systemctl mask systemd-networkd-wait-online

# Cleanup stuff we don't want floating around
apt-get autoclean
apt-get --purge -y autoremove
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /etc/resolv.conf
truncate -s0 /var/lib/dbus/machine-id /etc/machine-id # Nuke machine IDs but keep files so systemd is happy
rm -rf /root/kernel # kernel working dir
